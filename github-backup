#!/usr/bin/env php
<?php

function callGithubApi($url, $username, $password = null)
{
    if ( ! $password) {
        $password = readline('Please enter your GitHub password: ');
    }

    $handler = curl_init();

    curl_setopt($handler, CURLOPT_URL, $url);
    curl_setopt($handler, CURLOPT_USERPWD, sprintf('%s:%s', $username, $password));
    curl_setopt($handler, CURLOPT_HEADER, false);
    curl_setopt($handler, CURLOPT_RETURNTRANSFER, true);
    curl_setopt(
        $handler,
        CURLOPT_USERAGENT,
        ('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)' .
        ' Chrome/40.0.2214.111 Safari/537.36')
    );

    $contents = curl_exec($handler);

    curl_close($handler);

    if ( ! $contents) {
        return null;
    }

    return json_decode($contents, true);
}

function getUserRepos($user)
{
    $result = callGithubApi(sprintf(
        'https://api.github.com/users/%s/repos?type=owner',
        urlencode($user)
    ), $user);

    if (array_key_exists('message', $result)) {
        return null;
    }

    return array_map(function ($row) {
        return $row['name'];
    }, $result);
}

function downloadArchive($user, $repoName, $saveTo, $unpack = false)
{
    $url = sprintf(
        'https://github.com/%s/%s/archive/master.zip',
        urlencode($user),
        urlencode($repoName)
    );

    if ( ! $contents = file_get_contents($url)) {
        return false;
    }

    $result = (boolean) file_put_contents(
        $path = sprintf('%s/%s.zip', $saveTo, $repoName),
        $contents
    );

    if ( ! $unpack) {
        return $result;
    }

    return unpackArchive($path) && unlink($path);
}

function getUsername($argv)
{
    if (count($argv) < 2) {
        return null;
    }

    $username = trim($argv[1]);

    if (strpos($username, '@') === 0) {
        $username = substr($username, 1);
    }

    return $username;
}

function getDirName($argv)
{
    if (count($argv) < 3) {
        return false;
    }

    return trim($argv[2]);
}

function createDirIfAbsent($argv)
{
    if ( ! $name = getDirName($argv)) {
        return false;
    }

    $path = getcwd() . '/' . $name;

    if (is_readable($path) && is_dir($path)) {
        return true;
    }

    return mkdir($path);
}

function shouldUnpack($argv)
{
    if (count($argv) < 4) {
        return false;
    }

    return trim($argv[3]) == 'unpack';
}

function unpackArchive($path)
{
    $archive = new ZipArchive;

    if ($archive->open($path)) {
        $archive->extractTo(dirname($path));
        $archive->close();

        return true;
    }

    return false;
}

function makeBackup($argv)
{
    if ( ! $username = getUsername($argv)) {
        die('No username given.' . PHP_EOL);
    }

    printf('Downloading repos owned by @%s.%s', $username, PHP_EOL);

    if ( ! $repos = getUserRepos($username)) {
        die('User does not exist or wrong credentials.' . PHP_EOL);
    }

    if ( ! createDirIfAbsent($argv)) {
        die('Not enough arguments or cannot create a directory.' . PHP_EOL);
    }

    printf('Saving to %s...%s', getDirName($argv), PHP_EOL);

    $path = realpath(getcwd() . '/' . getDirName($argv));

    foreach ($repos as $repoName) {
        printf('Downloading %s...', $repoName);

        if (downloadArchive($username, $repoName, $path, shouldUnpack($argv))) {
            echo ' Done.', PHP_EOL;
        } else {
            echo ' Failed.', PHP_EOL;
            break;
        }
    }
}

//error_reporting(E_ALL);
//ini_set('display_errors', true);
set_time_limit(0);

makeBackup($argv);
